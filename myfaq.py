import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import sqlite3
import aiosqlite
from datetime import datetime, timedelta
import json
from collections import defaultdict

API_TOKEN = '–¢–£–¢–ê –¢–û–ö–ï–ù.'
ADMIN_ID = 6806110770
RATE_LIMIT = 5
user_last_action = defaultdict(datetime.now)
blocked_users = set()
START_COMMAND_LIMIT = 3
START_COMMAND_WINDOW = 60
start_command_attempts = defaultdict(list)

class BanDurations:
    TWELVE_HOURS = 12 * 3600
    ONE_DAY = 24 * 3600
    ONE_WEEK = 7 * 24 * 3600
    ONE_MONTH = 30 * 24 * 3600
    ONE_YEAR = 365 * 24 * 3600
    PERMANENT = -1

class Config:
    def __init__(self):
        self.load_config()

    def load_config(self):
        try:
            with open('config.json', 'r') as f:
                self.data = json.load(f)
                if 'is_online' not in self.data:
                    self.data['is_online'] = False
                    self.save_config()
        except FileNotFoundError:
            self.data = {
                'forum_link': 'lolz.live/kqlol/',
                'telegram_username': 'selyaqiyana',
                'image_url': 'https://a-static.besthdwallpaper.com/spirit-blossom-kindred-anime-fa-league-of-legends-lol-wallpaper-2048x1536-95391_26.jpg',
                'total_users': 0,
                'daily_users': 0,
                'is_online': False
            }
            self.save_config()

    def save_config(self):
        with open('config.json', 'w') as f:
            json.dump(self.data, f, indent=4)

class AdminStates(StatesGroup):
    waiting_for_forum_link = State()
    waiting_for_telegram = State()
    waiting_for_image = State()
    waiting_for_broadcast = State()

async def init_db():
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                joined_date TIMESTAMP,
                last_activity TIMESTAMP,
                interaction_count INTEGER DEFAULT 0,
                is_blocked INTEGER DEFAULT 0,
                ban_until TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS spam_attempts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                attempt_time TIMESTAMP,
                         
                foreign key (user_id) references users(user_id)
            )
        ''')
        await db.commit()

async def check_start_spam(user_id: int) -> tuple[bool, int]:
    """
    Check if user is spamming /start command
    Returns (is_spam, attempts_count)
    """
    current_time = datetime.now()
    
    user_attempts = start_command_attempts[user_id]
    user_attempts.append(current_time)
    
    user_attempts = [attempt for attempt in user_attempts 
                    if (current_time - attempt) < timedelta(seconds=START_COMMAND_WINDOW)]
    start_command_attempts[user_id] = user_attempts
    
    return (len(user_attempts) > START_COMMAND_LIMIT, len(user_attempts))

logging.basicConfig(level=logging.INFO)
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage, loop=loop)
config = Config()

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup()
    status_text = "üü¢ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –û—Ñ–ª–∞–π–Ω" if config.data['is_online'] else "üî¥ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –û–Ω–ª–∞–π–Ω"
    keyboard.add(InlineKeyboardButton(status_text, callback_data="toggle_status"))
    keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"))
    keyboard.add(InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="start_broadcast"))
    keyboard.add(InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="active_users"))
    keyboard.add(InlineKeyboardButton("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏", callback_data="manage_blocks"))
    keyboard.add(InlineKeyboardButton("üìã –õ–æ–≥ —Å–ø–∞–º–∞", callback_data="spam_log"))
    keyboard.add(InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä—É–º", callback_data="change_forum"))
    keyboard.add(InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å Telegram username", callback_data="change_telegram"))
    keyboard.add(InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="change_image"))
    keyboard.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

def get_main_keyboard(user_id=None):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üìö FAQ", callback_data="faq"),
        InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{config.data['telegram_username']}")
    )
    status = "üü¢ –û–Ω–ª–∞–π–Ω" if config.data['is_online'] else "üî¥ –û—Ñ–ª–∞–π–Ω"
    keyboard.add(InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {status}", callback_data="check_status"))
    keyboard.add(InlineKeyboardButton("üíù –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏—è—Ç–Ω–æ", url="https://lolz.live/payment/balance-transfer?user_id=5680221&hold=1&_noRedirect=1"))
    if user_id == ADMIN_ID:
        keyboard.add(InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return keyboard

def get_faq_keyboard(user_id=None):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{config.data['telegram_username']}")
    )
    keyboard.add(InlineKeyboardButton("üíù –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏—è—Ç–Ω–æ", url="https://lolz.live/payment/balance-transfer?user_id=5680221&hold=1&_noRedirect=1"))
    keyboard.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start"))
    if user_id == ADMIN_ID:
        keyboard.add(InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return keyboard

start_command_usage = defaultdict(int)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    
    if user_id == ADMIN_ID:
        await show_start_menu(message)
        return

    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT is_blocked, ban_until FROM users WHERE user_id = ?', (user_id,))
        result = await cursor.fetchone()
        if result and result[0]:
            try:
                await message.delete()
            except:
                pass
            if result[1]:
                ban_until = datetime.strptime(result[1], '%Y-%m-%d %H:%M:%S.%f')
                remaining = ban_until - datetime.now()
                if remaining.total_seconds() > 0:
                    hours = remaining.total_seconds() // 3600
                    await message.answer(f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—â–µ –Ω–∞ {int(hours)} —á–∞—Å–æ–≤.")
            else:
                await message.answer("‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
            return

    start_command_usage[user_id] += 1
    if start_command_usage[user_id] > 1:
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute('''
                INSERT INTO spam_attempts (user_id, attempt_time)
                VALUES (?, ?)
            ''', (user_id, datetime.now()))
            await db.commit()
        
        await notify_admin_about_spam(
            user_id,
            message.from_user.username,
            message.from_user.first_name
        )
        
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /start!")
        return

    await show_start_menu(message)

@dp.message_handler(lambda message: True, state="*")
async def handle_all_messages(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id == ADMIN_ID:
        return
        
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT is_blocked FROM users WHERE user_id = ?', (user_id,))
        result = await cursor.fetchone()
        if result and result[0]:
            try:
                await message.delete()
            except:
                pass
            return

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

async def show_start_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, joined_date, last_activity, interaction_count)
            VALUES (?, ?, ?, ?, COALESCE((SELECT joined_date FROM users WHERE user_id = ?), ?), ?, 
                   COALESCE((SELECT interaction_count FROM users WHERE user_id = ?), 0) + 1)
        ''', (
            message.from_user.id, message.from_user.username,
            message.from_user.first_name, message.from_user.last_name,
            message.from_user.id, datetime.now(), datetime.now(),
            message.from_user.id
        ))
        await db.commit()

    welcome_text = f"""
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!*

üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
üìå –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö

üí´ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ü–æ–º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –†–∞—Å—Å–∫–∞–∂—É –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö

üî• *–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ* ‚¨áÔ∏è
"""
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    
    await message.answer_photo(
        photo=config.data['image_url'],
        caption=welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

async def update_user_activity(user_id):
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            UPDATE users 
            SET last_activity = ? 
            WHERE user_id = ?
        ''', (datetime.now(), user_id))
        await db.commit()


@dp.callback_query_handler(lambda c: c.data == "show_stats")
async def show_statistics(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return

    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT COUNT(*) FROM users')
        total_users = (await cursor.fetchone())[0]

        cursor = await db.execute('''
            SELECT COUNT(*) FROM users 
            WHERE last_activity > datetime('now', '-1 day')
        ''')
        active_users = (await cursor.fetchone())[0]

        cursor = await db.execute('''
            SELECT first_name, username, interaction_count 
            FROM users 
            ORDER BY interaction_count DESC 
            LIMIT 5
        ''')
        top_users = await cursor.fetchall()

    stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {active_users}

üèÜ *–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
"""
    for i, user in enumerate(top_users, 1):
        name = user[0] or f"@{user[1]}" or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        stats_text += f"{i}. {name} - {user[2]} –¥–µ–π—Å—Ç–≤–∏–π\n"

    await callback_query.message.edit_caption(
        caption=stats_text,
        parse_mode="Markdown",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "manage_blocks")
async def manage_blocks(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('''
            SELECT user_id, username, first_name, is_blocked, ban_until 
            FROM users 
            WHERE is_blocked = 1 OR user_id IN (
                SELECT user_id FROM users 
                ORDER BY last_activity DESC 
                LIMIT 10
            )
        ''')
        users = await cursor.fetchall()

    keyboard = InlineKeyboardMarkup(row_width=1)
    for user in users:
        user_id, username, first_name, is_blocked, ban_until = user
        display_name = first_name or f"@{username}" or f"User:{user_id}"
        
        if is_blocked:
            if ban_until:
                remaining = datetime.strptime(ban_until, '%Y-%m-%d %H:%M:%S.%f') - datetime.now()
                status = f"üîí {remaining.days}–¥ {remaining.seconds//3600}—á"
            else:
                status = "üîí Permanent"
        else:
            status = "üîì"
            
        keyboard.add(InlineKeyboardButton(
            f"{status} {display_name}", 
            callback_data=f"user_{user_id}"
        ))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await callback_query.message.edit_caption(
        caption="üö´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "spam_log")
async def show_spam_log(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return

    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('''
            SELECT 
                users.first_name,
                users.username,
                users.user_id,
                COUNT(spam_attempts.id) as spam_count,
                MAX(spam_attempts.attempt_time) as last_attempt
            FROM spam_attempts
            JOIN users ON spam_attempts.user_id = users.user_id
            GROUP BY users.user_id
            ORDER BY last_attempt DESC
            LIMIT 20
        ''')
        attempts = await cursor.fetchall()

    log_text = "üìã *–õ–æ–≥ –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∞–º–∞:*\n\n"
    for attempt in attempts:
        name = attempt[0] or f"@{attempt[1]}" or f"ID:{attempt[2]}"
        spam_count = attempt[3]
        last_time = datetime.strptime(attempt[4], '%Y-%m-%d %H:%M:%S.%f')
        log_text += f"üë§ *{name}*\n"
        log_text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {spam_count}\n"
        log_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {last_time.strftime('%H:%M %d.%m.%Y')}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))

    await callback_query.message.edit_caption(
        caption=log_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "active_users")
async def show_active_users(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return

    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('''
            SELECT first_name, username, last_activity 
            FROM users 
            WHERE last_activity > datetime('now', '-1 day')
            ORDER BY last_activity DESC
        ''')
        active_users = await cursor.fetchall()

    active_users_text = "üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞:*\n\n"
    for user in active_users:
        name = user[0] or f"@{user[1]}" or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        last_active = datetime.strptime(user[2], '%Y-%m-%d %H:%M:%S.%f')
        active_users_text += f"‚Ä¢ {name} - {last_active.strftime('%H:%M %d.%m.%Y')}\n"

    await callback_query.message.edit_caption(
        caption=active_users_text,
        parse_mode="Markdown",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_start")
async def back_to_start(callback_query: types.CallbackQuery):
    welcome_text = f"""
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!*

üëã –ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}!
üìå –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö

üí´ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ü–æ–º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –†–∞—Å—Å–∫–∞–∂—É –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö

üî• *–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ* ‚¨áÔ∏è
"""
    await callback_query.message.edit_caption(
        caption=welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(callback_query.from_user.id)
    )

@dp.callback_query_handler(lambda c: c.data == "faq")
async def show_faq(callback_query: types.CallbackQuery):
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            UPDATE users 
            SET interaction_count = interaction_count + 1,
                last_activity = ?
            WHERE user_id = ?
        ''', (datetime.now(), callback_query.from_user.id))
        await db.commit()

    faq_text = f"""
üìå *FAQ:*

üåê *–§–æ—Ä—É–º–Ω–∏–∫:* {config.data['forum_link']}
üí¨ *–ü—Ä–∞–≤–∏–ª–∞ —Å–¥–µ–ª–æ–∫:* –í—Å–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –ª–∏—á–∫—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ.
üÜî *Telegram ID:* 6806110770
üöÄ *–ë–£–°–¢ –í –õ–ò–ì–ï –õ–ï–ì–ï–ù–î:* –û—Ç–º–µ—Ç—å—Ç–µ "–ë–£–°–¢" –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏.
‚ùì *–§–æ—Ä—É–º:* –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ñ–æ—Ä—É–º–∞ - –≤ –ª–∏—á–∫—É.
ü§ñ *–ê–≤—Ç–æ—Ä–µ–≥–∏:* –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º EPS - –≤ –ª–∏—á–∫—É.
"""
    await callback_query.message.edit_caption(
        caption=faq_text,
        parse_mode="Markdown",
        reply_markup=get_faq_keyboard(callback_query.from_user.id)
    )
@dp.callback_query_handler(lambda c: c.data == "admin_panel")
async def admin_panel_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    
    admin_text = "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*"
    await callback_query.message.edit_caption(
        caption=admin_text,
        parse_mode="Markdown",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def return_to_main_menu(callback_query: types.CallbackQuery):
    welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!*

üî• *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ* ‚¨áÔ∏è
"""
    try:
        await callback_query.message.edit_caption(
            caption=welcome_text,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(callback_query.from_user.id)
        )
    except:
        try:
            await callback_query.message.delete()
        except:
            pass
        
        await callback_query.message.answer_photo(
            photo=config.data['image_url'],
            caption=welcome_text,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(callback_query.from_user.id)
        )

@dp.callback_query_handler(lambda c: c.data.startswith("user_"))
async def user_ban_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
        
    user_id = int(callback_query.data.split("_")[1])
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data=f"ban_{user_id}_{BanDurations.TWELVE_HOURS}"),
        InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"ban_{user_id}_{BanDurations.ONE_DAY}"),
        InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"ban_{user_id}_{BanDurations.ONE_WEEK}"),
        InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"ban_{user_id}_{BanDurations.ONE_MONTH}"),
        InlineKeyboardButton("1 –≥–æ–¥", callback_data=f"ban_{user_id}_{BanDurations.ONE_YEAR}"),
        InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"ban_{user_id}_{BanDurations.PERMANENT}"),
    )
    keyboard.add(InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_{user_id}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_blocks"))
    
    await callback_query.message.edit_caption(
        caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:{user_id}:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith(("ban_", "unban_")))
async def handle_ban_unban(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
        
    action, user_id = callback_query.data.split("_")[:2]
    user_id = int(user_id)
    
    if action == "ban":
        duration = int(callback_query.data.split("_")[2])
        await ban_user(user_id, duration)
        duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞" if duration == BanDurations.PERMANENT else f"–Ω–∞ {duration//3600} —á–∞—Å–æ–≤"
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {duration_text}")
    else:
        await unban_user(user_id)
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    await manage_blocks(callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith("change_"))
async def handle_admin_actions(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id != ADMIN_ID:
        return
    
    action = callback_query.data.split("_")[1]
    if action == "forum":
        await AdminStates.waiting_for_forum_link.set()
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä—É–º:")
    elif action == "telegram":
        await AdminStates.waiting_for_telegram.set()
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram username (–±–µ–∑ @):")
    elif action == "image":
        await AdminStates.waiting_for_image.set()
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")

@dp.message_handler(state=AdminStates.waiting_for_forum_link)
async def process_forum_link(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    config.data['forum_link'] = message.text
    config.save_config()
    await state.finish()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_admin_keyboard())

@dp.message_handler(state=AdminStates.waiting_for_telegram)
async def process_telegram(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    config.data['telegram_username'] = message.text.replace("@", "")
    config.save_config()
    await state.finish()
    await message.answer("‚úÖ Telegram username –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())

@dp.message_handler(state=AdminStates.waiting_for_image)
async def process_image(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    config.data['image_url'] = message.text
    config.save_config()
    await state.finish()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_admin_keyboard())

@dp.callback_query_handler(lambda c: c.data == "check_status")
async def check_status(callback_query: types.CallbackQuery):
    status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω" if config.data['is_online'] else "üî¥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω"
    await callback_query.answer(f"{status}", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "toggle_status")
async def toggle_status(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    
    config.data['is_online'] = not config.data['is_online']
    config.save_config()
    
    status = "üü¢ –û–Ω–ª–∞–π–Ω" if config.data['is_online'] else "üî¥ –û—Ñ–ª–∞–π–Ω"
    await callback_query.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}")
    
    admin_text = "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*"
    await callback_query.message.edit_caption(
        caption=admin_text,
        parse_mode="Markdown",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "start_broadcast")
async def start_broadcast(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    
    await AdminStates.waiting_for_broadcast.set()
    await callback_query.message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message_handler(state=AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await state.finish()
    status_message = await message.answer("üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT user_id FROM users WHERE is_blocked = 0 AND user_id != ?', (ADMIN_ID,))
        users = await cursor.fetchall()
    
    total_users = len(users)
    successful = 0
    failed = 0
    failed_users = []
    
    for user in users:
        try:
            await bot.send_message(user[0], message.text, parse_mode="Markdown")
            successful += 1
        except Exception as e:
            failed += 1
            failed_users.append(user[0])
        
        await asyncio.sleep(0.05)
    
    success_rate = (successful / total_users) * 100 if total_users > 0 else 0
    
    report = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:*

üìß –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {total_users}
‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful}
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%

"""
    if failed_users:
        report += "\n‚ùå *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
        report += "\n".join([f"‚Ä¢ `{uid}`" for uid in failed_users[:10]])
        if len(failed_users) > 10:
            report += f"\n_...–∏ –µ—â–µ {len(failed_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_"
    
    await status_message.edit_text(report, parse_mode="Markdown")
    
    await message.answer("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT is_blocked FROM users WHERE user_id = ?', (user_id,))
        result = await cursor.fetchone()
        if result and result[0] and user_id != ADMIN_ID:
            await callback_query.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
            return

    last_action = user_last_action[user_id]
    if datetime.now() - last_action < timedelta(seconds=RATE_LIMIT) and user_id != ADMIN_ID:
        await callback_query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º!", show_alert=True)
        
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute('''
                INSERT INTO spam_attempts (user_id, attempt_time)
                VALUES (?, ?)
            ''', (user_id, datetime.now()))
            await db.commit()
        return

    user_last_action[user_id] = datetime.now()
    await update_user_activity(user_id)
    await callback_query.answer()

async def unban_user_after_delay(user_id: int):
    """Unban user after 24 hours"""
    await asyncio.sleep(24 * 3600)
    
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            UPDATE users 
            SET is_blocked = 0
            WHERE user_id = ?
        ''', (user_id,))
        await db.commit()
    
    blocked_users.discard(user_id)
    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    except:
        pass

async def on_startup(dp):
    await init_db()
    logging.info('Bot started successfully!')

async def ban_user(user_id: int, duration: int = None):
    """
    Ban user for specified duration
    duration in seconds, None for permanent ban
    """
    ban_until = datetime.now() + timedelta(seconds=duration) if duration and duration > 0 else None
    
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            UPDATE users 
            SET is_blocked = 1,
                ban_until = ?
            WHERE user_id = ?
        ''', (ban_until, user_id))
        await db.commit()
    
    blocked_users.add(user_id)
    
    try:
        if duration and duration > 0:
            hours = duration // 3600
            await bot.send_message(user_id, f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours} —á–∞—Å–æ–≤.")
            asyncio.create_task(unban_user_after_delay(user_id, duration))
        else:
            await bot.send_message(user_id, "‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.")
    except:
        pass

async def unban_user(user_id: int):
    """Unban user immediately"""
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            UPDATE users 
            SET is_blocked = 0,
                ban_until = NULL
            WHERE user_id = ?
        ''', (user_id,))
        await db.commit()
    
    blocked_users.discard(user_id)
    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass

async def unban_user_after_delay(user_id: int, delay: int):
    """Unban user after specified delay in seconds"""
    await asyncio.sleep(delay)
    
    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('SELECT is_blocked, ban_until FROM users WHERE user_id = ?', (user_id,))
        result = await cursor.fetchone()
        
        if not result or not result[0]:
            return
            
        if result[1]:
            ban_until = datetime.strptime(result[1], '%Y-%m-%d %H:%M:%S.%f')
            if ban_until > datetime.now() + timedelta(seconds=1):
                return
    
    await unban_user(user_id)

async def notify_admin_about_spam(user_id: int, username: str = None, first_name: str = None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∞–º–∞"""
    display_name = first_name or f"@{username}" or f"ID:{user_id}"
    admin_message = f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º!*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\nüÜî ID: `{user_id}`"
    
    try:
        await bot.send_message(
            ADMIN_ID,
            admin_message,
            parse_mode="Markdown"
        )
    except:
        pass

if __name__ == '__main__':
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            timeout=20
        )
    except Exception as e:
        logging.error(f"Critical error: {e}")
    finally:
        loop.run_until_complete(dp.storage.close())
        loop.run_until_complete(dp.storage.wait_closed())
        loop.close()